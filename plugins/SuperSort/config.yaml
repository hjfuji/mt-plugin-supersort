#cd 
# SuperSort
# 2008/10/20 1.00b1 Beta release
# 2009/02/02 1.00rc1 Release Candidate 1
# 2009/03/10 1.00rc2 Release Candidate 2
# 2009/03/26 1.00
# 2009/11/18 1.10b1 Beta release for Movable Type 5
# 2010/02/15 1.10RC1 RC1 for Movable Type 5
# 2010/05/15 1.10RC2 RC2 for Movable Type 5.02
# 2010/06/01 1.10
# 2011/05/26 1.20b1 Beta release for Movable Type 5.1
# 2012/07/20 1.20b2 For Movable Type 5.2
# 2013/08/22 1.20b3 For Movable Type 6
# 2014/04/01 1.20b4 Fixed bugs
# 2014/10/31 1.20b5 Fixed bugs
# 2015/11/09 1.21 Fixed PSGI
#
# Copyright(c) by H.Fujimoto
#
name: SuperSort
id: SuperSort
key: SuperSort
version: 1.21
author_name: <__trans phrase="Hajime Fujimoto">
author_link: http://www.h-fj.com/blog/
doc_link: http://www.h-fj.com/blog/mtplgdoc/supersort.php
description: <__trans phrase="This plugin enables you to sort entries, pages, categories and folders.">
blog_config_template: blog_config.tmpl
system_config_template: system_config.tmpl
settings:
  fjss_enabled_sort_entry:
    default: 0
  fjss_enabled_sort_page:
    default: 0
  fjss_auto_rebuild_entry:
    default: 1
  fjss_auto_rebuild_page:
    default: 1
  fjss_auto_rebuild_after_delete_entry:
    default: 1
  fjss_auto_rebuild_after_delete_page:
    default: 1
  fjss_auto_rebuild_after_unpublish_past_entries:
    default: 1
  fjss_enabled_drag_and_drop:
    default: 1
schema_version: 1.01
l10n_class: SuperSort::L10N
tags:
  block:
    SortedEntries: $SuperSort::SuperSort::ContextHandler::sorted_entries
    SortedPages: $SuperSort::SuperSort::ContextHandler::sorted_pages
    SortedEntryPrevious: $SuperSort::SuperSort::ContextHandler::sorted_entry_prev_next
    SortedEntryNext: $SuperSort::SuperSort::ContextHandler::sorted_entry_prev_next
    SortedPagePrevious: $SuperSort::SuperSort::ContextHandler::sorted_page_prev_next
    SortedPageNext: $SuperSort::SuperSort::ContextHandler::sorted_page_prev_next
    SortedCategoryPrevious: $SuperSort::SuperSort::ContextHandler::sorted_category_prev_next
    SortedCategoryNext: $SuperSort::SuperSort::ContextHandler::sorted_category_prev_next
    SortedFolderPrevious: $SuperSort::SuperSort::ContextHandler::sorted_folder_prev_next
    SortedFolderNext: $SuperSort::SuperSort::ContextHandler::sorted_folder_prev_next
    SortedEntryCategories: $SuperSort::SuperSort::ContextHandler::sorted_entry_categories
    SortedTopLevelCategories: $SuperSort::SuperSort::ContextHandler::sorted_top_level_categories
    SortedSubCategories: $SuperSort::SuperSort::ContextHandler::sorted_sub_categories
    SortedTopLevelFolders: $SuperSort::SuperSort::ContextHandler::sorted_top_level_folders
    SortedSubFolders: $SuperSort::SuperSort::ContextHandler::sorted_sub_folders
  function:
    EntryOrderNumber: $SuperSort::SuperSort::ContextHandler::entry_order_number
    PageOrderNumber: $SuperSort::SuperSort::ContextHandler::entry_order_number
    CategoryOrderNumber: $SuperSort::SuperSort::ContextHandler::category_order_number
    FolderOrderNumber: $SuperSort::SuperSort::ContextHandler::folder_order_number
object_types:
  entry:
    order_number: integer
  placement:
    order_number: integer
  category:
    order_number: integer
init_app: $SuperSort::SuperSort::Callback::init_app
callbacks:
  MT::App::CMS::template_param.edit_category: $SuperSort::SuperSort::Transformer::edit_category
  MT::App::CMS::template_param.edit_folder: $SuperSort::SuperSort::Transformer::edit_category
  MT::App::CMS::template_param.edit_entry: $SuperSort::SuperSort::Transformer::edit_entry
  cms_pre_save.category:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_category('category', @_); }
  cms_pre_save.folder:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_category('folder', @_); }
  cms_post_save.category:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_category('category', @_); }
  cms_post_save.folder:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_category('folder', @_); }
  cms_post_delete.category:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_delete_category('category', @_); }
  cms_post_delete.folder:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_delete_category('folder', @_); }
  cms_pre_save.entry:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_entry('entry', @_); }
  cms_pre_save.page:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_entry('page', @_); }
  cms_post_save.entry:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_entry('entry', @_); }
  cms_post_save.page:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_entry('page', @_); }
  cms_post_delete.entry:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_delete_entry('entry', @_); }
  cms_post_delete.page:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_delete_entry('page', @_); }
  cms_delete_permission_filter.entry:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_delete_entry(@_); }
  cms_delete_permission_filter.page:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_delete_entry(@_); }
  cms_post_bulk_save.category:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::bulk_save_categories(@_); }
  cms_post_bulk_save.folder:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::bulk_save_categories(@_); }
  api_pre_save.category:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_category('category', @_); }
  api_pre_save.folder:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_category('folder', @_); }
  api_post_save.category:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_category('category', @_); }
  api_post_save.folder:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_category('folder', @_); }
  api_pre_save.entry:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_entry('entry', @_); }
  api_pre_save.page:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_entry('page', @_); }
  api_post_save.entry:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_entry('entry', @_); }
  api_post_save.page:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_entry('page', @_); }
  data_api_pre_save.category:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_category('category', @_); }
  data_api_pre_save.folder:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_category('folder', @_); }
  data_api_post_save.category:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_category('category', @_); }
  data_api_post_save.folder:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_category('folder', @_); }
  data_api_pre_save.entry:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_entry('entry', @_); }
  data_api_pre_save.page:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_save_entry('page', @_); }
  data_api_post_save.entry:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_entry('entry', @_); }
  data_api_post_save.page:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_save_entry('page', @_); }
  unpublish_past_entries: $SuperSort::SuperSort::Callback::unpublish_past_entries
  data_api_post_delete.entry:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_delete_entry('entry', @_); }
  data_api_post_delete.page:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_delete_entry('page', @_); }
  data_api_delete_permission_filter.entry:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_delete_entry(@_); }
  data_api_delete_permission_filter.page:
    priority: 1
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::pre_delete_entry(@_); }
  data_api_post_delete.category:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_delete_category('category', @_); }
  data_api_post_delete.folder:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::post_delete_category('folder', @_); }
  data_api_post_bulk_save.category:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::bulk_save_categories(@_); }
  data_api_post_bulk_save.folder:
    priority: 9
    code: >
      sub { require SuperSort::Callback; SuperSort::Callback::bulk_save_categories(@_); }
applications:
  cms:
    menus:
      entry:fjss_cat_entry:
        label: Categories and entries
        mode: fjss_sort_order
        order: 350
        args:
          type: category
        view:
          - blog
          - website
        permission: create_post,publish_post,edit_all_posts
        condition: >
          sub {
            my $app = MT->instance;
            my $plugin = MT->component('SuperSort');
            my $blog_id = $app->param('blog_id') or return 0;
            my $blog = $app->blog;
            return 0 if (MT->version_number < 6 && !$blog->is_blog);
            return $plugin->get_config_value('fjss_enabled_sort_entry', 'blog:' . $blog_id);
          }
      page:fjss_fld_page:
        label: Folders and pages
        mode: fjss_sort_order
        order: 350
        args:
          type: folder
        view:
          - blog
          - website
        permission: manage_pages
        condition: >
          sub {
            my $app = MT->instance;
            my $plugin = MT->component('SuperSort');
            my $blog_id = $app->param('blog_id') or return 0;
            return $plugin->get_config_value('fjss_enabled_sort_page', 'blog:' . $blog_id);
          }
    methods:
      fjss_init_start: $SuperSort::SuperSort::Initialize::init_start
      fjss_init_main: $SuperSort::SuperSort::Initialize::init_main
      fjss_init_cat_order: $SuperSort::SuperSort::Initialize::init_cat_order
      fjss_init_entry_order: $SuperSort::SuperSort::Initialize::init_entry_order
      fjss_init_save_mt5_order: $SuperSort::SuperSort::Initialize::init_save_mt5_order
      fjss_sort_order: $SuperSort::SuperSort::Sort::start_sort_order
      fjss_load_categories: $SuperSort::SuperSort::Sort::load_categories
      fjss_load_entries: $SuperSort::SuperSort::Sort::load_entries
      fjss_save_start: $SuperSort::SuperSort::Sort::save_start
      fjss_save_moved_data: $SuperSort::SuperSort::Sort::save_moved_data
      fjss_save_cat_order: $SuperSort::SuperSort::Sort::save_cat_order
      fjss_save_entry_order: $SuperSort::SuperSort::Sort::save_entry_order
      fjss_select_category: $SuperSort::SuperSort::Sort::select_category
      fjss_get_child_categories: $SuperSort::SuperSort::Sort::get_child_categories
      fjss_move_start: $SuperSort::SuperSort::Initialize::move_start
      fjss_select_blogs: $SuperSort::SuperSort::Initialize::select_blogs
      fjss_move: $SuperSort::SuperSort::Initialize::move
upgrade_functions:
  remove_orphan_categories:
    version_limit: 1.01
    code: >
      sub { require SuperSort::Initialize; SuperSort::Initialize::remove_orphan_categories(@_); }
